# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_async2/backend.gni")
import("$dir_pw_build/module_config.gni")
import("$dir_pw_build/target_types.gni")
import("$dir_pw_unit_test/test.gni")

declare_args() {
  # The build target that overrides the default configuration options for this
  # module. This should point to a source set that provides defines through a
  # public config (which may -include a file or add defines directly).
  pw_multibuf_CONFIG = pw_build_DEFAULT_MODULE_CONFIG
}

config("public_include_path") {
  include_dirs = [ "public" ]
  visibility = [ ":*" ]
}

pw_source_set("config") {
  public = [ "public/pw_multibuf/config.h" ]
  public_configs = [ ":public_include_path" ]
  public_deps = [ pw_multibuf_CONFIG ]
}

config("v1_config") {
  defines = [ "PW_MULTIBUF_VERSION=1" ]
}

pw_source_set("pw_multibuf") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/multibuf.h" ]
  public_deps = [
    ":config",
    ":multibuf_v1",
  ]
}

pw_source_set("chunk") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/chunk.h" ]
  sources = [ "chunk.cc" ]
  public_deps = [
    ":config",
    "$dir_pw_sync:mutex",
    dir_pw_assert,
    dir_pw_bytes,
    dir_pw_preprocessor,
    dir_pw_span,
  ]
  deps = [ "$dir_pw_assert:check" ]
}

pw_source_set("header_chunk_region_tracker") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/header_chunk_region_tracker.h" ]
  public_deps = [
    ":chunk",
    ":config",
    dir_pw_allocator,
    dir_pw_bytes,
  ]
}

pw_test("header_chunk_region_tracker_test") {
  deps = [
    ":chunk",
    ":header_chunk_region_tracker",
    "$dir_pw_allocator:testing",
    dir_pw_status,
  ]
  sources = [ "header_chunk_region_tracker_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("single_chunk_region_tracker") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/single_chunk_region_tracker.h" ]
  public_deps = [
    ":chunk",
    ":config",
    dir_pw_assert,
    dir_pw_bytes,
  ]
}

pw_test("single_chunk_region_tracker_test") {
  deps = [
    ":chunk",
    ":single_chunk_region_tracker",
  ]
  sources = [ "single_chunk_region_tracker_test.cc" ]
  configs = [ ":v1_config" ]

  # TODO: b/260624583 - Fix this for //targets/rp2040
  enable_if = pw_build_EXECUTABLE_TARGET_TYPE != "pico_executable"
}

pw_test("chunk_test") {
  deps = [
    ":chunk",
    ":header_chunk_region_tracker",
    "$dir_pw_allocator:testing",
  ]
  sources = [ "chunk_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("multibuf_v1") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/multibuf_v1.h" ]
  sources = [ "multibuf_v1.cc" ]
  public_deps = [
    ":chunk",
    ":config",
    dir_pw_preprocessor,
    dir_pw_status,
  ]
}

pw_test("multibuf_v1_test") {
  deps = [
    ":internal_test_utils",
    ":multibuf_v1",
    dir_pw_bytes,
  ]
  sources = [ "multibuf_v1_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("allocator") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/allocator.h" ]
  sources = [ "allocator.cc" ]
  public_deps = [
    ":config",
    ":multibuf_v1",
    "$dir_pw_containers:intrusive_forward_list",
    "$dir_pw_result",
    "$dir_pw_sync:interrupt_spin_lock",
  ]
}

pw_source_set("allocator_async") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/allocator_async.h" ]
  sources = [ "allocator_async.cc" ]
  public_deps = [
    ":allocator",
    ":config",
    "$dir_pw_async2:dispatcher",
    "$dir_pw_async2:poll",
  ]
}

# TODO: https://pwbug.dev/384583239 - Split async into its own test.
pw_test("allocator_test") {
  enable_if = pw_async2_DISPATCHER_BACKEND != ""
  deps = [
    ":allocator",
    ":allocator_async",
    "$dir_pw_async2:dispatcher",
    "$dir_pw_async2:poll",
  ]
  sources = [ "allocator_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("simple_allocator") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/simple_allocator.h" ]
  sources = [ "simple_allocator.cc" ]
  public_deps = [
    ":allocator",
    ":config",
    ":multibuf_v1",
    "$dir_pw_allocator:allocator",
    "$dir_pw_containers:intrusive_list",
  ]
  deps = [ "$dir_pw_bytes:alignment" ]
}

pw_test("simple_allocator_test") {
  enable_if = pw_async2_DISPATCHER_BACKEND != ""
  deps = [
    ":simple_allocator",
    "$dir_pw_allocator:null_allocator",
    "$dir_pw_allocator:testing",
  ]
  sources = [ "simple_allocator_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("stream") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/stream.h" ]
  public_deps = [
    ":config",
    ":multibuf_v1",
    dir_pw_status,
    dir_pw_stream,
  ]
  sources = [ "stream.cc" ]
}

pw_test("stream_test") {
  enable_if = pw_async2_DISPATCHER_BACKEND != ""
  deps = [
    ":internal_test_utils",
    ":stream",
  ]
  sources = [ "stream_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("from_span") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/from_span.h" ]
  public_deps = [
    ":multibuf_v1",
    dir_pw_allocator,
    dir_pw_function,
  ]
  sources = [ "from_span.cc" ]
}

pw_test("from_span_test") {
  deps = [
    ":from_span",
    "$dir_pw_allocator:testing",
  ]
  sources = [ "from_span_test.cc" ]
  configs = [ ":v1_config" ]
}

pw_source_set("testing") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/simple_allocator_for_test.h" ]
  public_deps = [
    ":simple_allocator",
    "$dir_pw_allocator:synchronized_allocator",
    "$dir_pw_allocator:testing",
    "$dir_pw_sync:mutex",
    dir_pw_assert,
  ]
}

pw_source_set("internal_test_utils") {
  sources = [ "pw_multibuf_private/test_utils.h" ]
  public_deps = [
    ":header_chunk_region_tracker",
    ":multibuf_v1",
    "$dir_pw_allocator:testing",
    dir_pw_assert,
    dir_pw_bytes,
  ]
  visibility = [ ":*" ]
}

## Multibuf v2

config("v2_config") {
  defines = [ "PW_MULTIBUF_VERSION=PW_MULTIBUF_V2" ]
}

pw_source_set("iterators") {
  public_configs = [ ":public_include_path" ]
  public = [
    "public/pw_multibuf/internal/byte_iterator.h",
    "public/pw_multibuf/internal/chunk_iterator.h",
    "public/pw_multibuf/internal/entry.h",
  ]
  public_deps = [
    ":chunk",
    "$dir_pw_assert:assert",
    "$dir_pw_containers:dynamic_deque",
    dir_pw_bytes,
    dir_pw_preprocessor,
  ]
  visibility = [ ":*" ]
}

pw_test("chunk_iterator_test") {
  sources = [ "chunk_iterator_test.cc" ]
  deps = [
    ":iterator_testing",
    ":iterators",
  ]
}

pw_test("byte_iterator_test") {
  sources = [ "byte_iterator_test.cc" ]
  deps = [
    ":iterator_testing",
    ":iterators",
  ]
}

pw_source_set("iterator_testing") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_multibuf/internal/iterator_testing.h" ]
  public_deps = [
    ":iterators",
    "$dir_pw_allocator:bump_allocator",
    dir_pw_unit_test,
  ]
}

pw_source_set("multibuf_v2") {
  public_configs = [ ":public_include_path" ]
  public = [
    "public/pw_multibuf/multibuf_v2.h",
    "public/pw_multibuf/observer.h",
    "public/pw_multibuf/properties.h",
  ]
  public_deps = [
    ":iterators",
    "$dir_pw_containers:dynamic_deque",
    dir_pw_allocator,
    dir_pw_bytes,
  ]
  sources = [ "multibuf_v2.cc" ]
  deps = [ "$dir_pw_assert:check" ]
}

pw_test("multibuf_v2_test") {
  sources = [ "multibuf_v2_test.cc" ]
  deps = [
    ":chunk",
    ":iterators",
    ":multibuf_v2",
    "$dir_pw_allocator:chunk_pool",
    "$dir_pw_allocator:testing",
    "$dir_pw_assert:check",
    dir_pw_bytes,
    dir_pw_result,
    dir_pw_status,
  ]
  negative_compilation_tests = true
}

## Test group

pw_test_group("tests") {
  tests = [
    ":allocator_test",
    ":chunk_test",
    ":from_span_test",
    ":header_chunk_region_tracker_test",
    ":multibuf_v1_test",
    ":simple_allocator_test",
    ":single_chunk_region_tracker_test",
    ":stream_test",

    # v2 tests
    ":byte_iterator_test",
    ":chunk_iterator_test",
    ":multibuf_v2_test",
  ]
}
