# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

cc_library(
    name = "pw_multisink",
    srcs = [
        "multisink.cc",
    ],
    hdrs = [
        "public/pw_multisink/config.h",
        "public/pw_multisink/multisink.h",
    ],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":config_override",
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_function",
        "//pw_log",
        "//pw_result",
        "//pw_ring_buffer",
        "//pw_sync:interrupt_spin_lock",
        "//pw_sync:lock_annotations",
        "//pw_sync:mutex",
        "//pw_varint",
    ],
)

label_flag(
    name = "config_override",
    build_setting_default = "//pw_build:default_module_config",
)

cc_library(
    name = "util",
    srcs = ["util.cc"],
    hdrs = ["public/pw_multisink/util.h"],
    strip_include_prefix = "public",
    deps = [
        ":pw_multisink",
        "//pw_bytes",
        "//pw_function",
        "//pw_log",
        "//pw_log:log_proto_pwpb",
        "//pw_status",
    ],
)

cc_library(
    name = "test_thread",
    hdrs = ["public/pw_multisink/test_thread.h"],
    strip_include_prefix = "public",
    deps = [
        "//pw_thread:thread",
    ],
)

pw_cc_test(
    name = "multisink_test",
    srcs = [
        "multisink_test.cc",
    ],
    deps = [
        ":pw_multisink",
        "//pw_function",
        "//pw_preprocessor",
        "//pw_status",
    ],
)

cc_library(
    name = "multisink_threaded_test",
    testonly = True,
    srcs = [
        "multisink_threaded_test.cc",
    ],
    implementation_deps = ["//pw_containers:vector"],
    deps = [
        ":pw_multisink",
        ":test_thread",
        "//pw_string",
        "//pw_thread:thread",
        "//pw_thread:thread_core",
        "//pw_thread:yield",
        "//pw_unit_test",
    ],
)

cc_library(
    name = "stl_test_thread",
    srcs = [
        "stl_test_thread.cc",
    ],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":test_thread",
        "//pw_thread:thread",
        "//pw_thread_stl:thread",
    ],
)

pw_cc_test(
    name = "stl_multisink_threaded_test",
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":multisink_threaded_test",
        ":stl_test_thread",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "Kconfig",
        "docs.rst",
    ],
    prefix = "pw_multisink/",
    target_compatible_with = incompatible_with_mcu(),
)
