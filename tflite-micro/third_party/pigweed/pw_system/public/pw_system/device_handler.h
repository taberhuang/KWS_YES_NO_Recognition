// Copyright 2024 The Pigweed Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
#pragma once

#include "pw_snapshot_protos/snapshot.pwpb.h"

struct pw_cpu_exception_State;

// device_handler facade to a device specific backend.
namespace pw::system::device_handler {

// Trigger an immediate reboot.
void RebootSystem();

// Populate a snapshot with device specific metadata, such as cpu architecture.
// Custom application information such as project name may also be provided.
void CapturePlatformMetadata(
    snapshot::pwpb::Metadata::StreamEncoder& metadata_encoder);

// Populate a snapshot with architecture specific CPU state generated by a
// CPU exception.
Status CaptureCpuState(
    const pw_cpu_exception_State& cpu_state,
    snapshot::pwpb::Snapshot::StreamEncoder& snapshot_encoder);

// Captures the main system thread as part of a snapshot
Status CaptureMainStackThread(
    const pw_cpu_exception_State& cpu_state,
    thread::proto::pwpb::SnapshotThreadInfo::StreamEncoder& encoder);

// Captures all threads in the system as part of a snapshot
Status CaptureThreads(
    uint32_t running_thread_stack_pointer,
    thread::proto::pwpb::SnapshotThreadInfo::StreamEncoder& encoder);

}  // namespace pw::system::device_handler
