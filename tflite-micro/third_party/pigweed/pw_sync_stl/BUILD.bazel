# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

cc_library(
    name = "binary_semaphore",
    srcs = [
        "binary_semaphore.cc",
    ],
    hdrs = [
        "public_overrides/pw_sync_backend/binary_semaphore_inline.h",
        "public_overrides/pw_sync_backend/binary_semaphore_native.h",
    ],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":binary_semaphore_private",
        "//pw_chrono:system_clock",
        "//pw_sync:binary_semaphore.facade",
    ],
)

cc_library(
    name = "binary_semaphore_private",
    hdrs = [
        "public/pw_sync_stl/binary_semaphore_inline.h",
        "public/pw_sync_stl/binary_semaphore_native.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_chrono:system_clock",
        "//pw_sync:binary_semaphore.facade",
    ],
)

cc_library(
    name = "counting_semaphore",
    srcs = [
        "counting_semaphore.cc",
    ],
    hdrs = [
        "public_overrides/pw_sync_backend/counting_semaphore_inline.h",
        "public_overrides/pw_sync_backend/counting_semaphore_native.h",
    ],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":counting_semaphore_private",
        "//pw_chrono:system_clock",
        "//pw_sync:counting_semaphore.facade",
    ],
)

cc_library(
    name = "counting_semaphore_private",
    hdrs = [
        "public/pw_sync_stl/counting_semaphore_inline.h",
        "public/pw_sync_stl/counting_semaphore_native.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_chrono:system_clock",
        "//pw_sync:counting_semaphore.facade",
    ],
)

cc_library(
    name = "mutex",
    srcs = ["mutex.cc"],
    hdrs = [
        "public_overrides/pw_sync_backend/mutex_inline.h",
        "public_overrides/pw_sync_backend/mutex_native.h",
    ],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":mutex_private",
        "//pw_sync:mutex.facade",
    ],
)

cc_library(
    name = "mutex_private",
    hdrs = [
        "public/pw_sync_stl/mutex_inline.h",
        "public/pw_sync_stl/mutex_native.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = ["//pw_sync:mutex.facade"],
)

cc_library(
    name = "timed_mutex",
    hdrs = [
        "public_overrides/pw_sync_backend/timed_mutex_inline.h",
    ],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":timed_mutex_private",
    ],
)

cc_library(
    name = "timed_mutex_private",
    hdrs = [
        "public/pw_sync_stl/timed_mutex_inline.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_chrono:system_clock",
        "//pw_sync:timed_mutex.facade",
    ],
)

cc_library(
    name = "recursive_mutex",
    hdrs = [
        "public_overrides/pw_sync_backend/recursive_mutex_inline.h",
        "public_overrides/pw_sync_backend/recursive_mutex_native.h",
    ],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":recursive_mutex_private",
    ],
)

cc_library(
    name = "recursive_mutex_private",
    hdrs = [
        "public/pw_sync_stl/recursive_mutex_inline.h",
        "public/pw_sync_stl/recursive_mutex_native.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_assert:assert",
        "//pw_sync:recursive_mutex.facade",
    ],
)

cc_library(
    name = "interrupt_spin_lock",
    hdrs = [
        "public_overrides/pw_sync_backend/interrupt_spin_lock_inline.h",
        "public_overrides/pw_sync_backend/interrupt_spin_lock_native.h",
    ],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":interrupt_spin_lock_private",
    ],
)

cc_library(
    name = "interrupt_spin_lock_private",
    hdrs = [
        "public/pw_sync_stl/interrupt_spin_lock_inline.h",
        "public/pw_sync_stl/interrupt_spin_lock_native.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_sync:interrupt_spin_lock.facade",
        "//pw_sync:yield_core",
    ],
)

cc_library(
    name = "condition_variable",
    hdrs = [
        "public_overrides/pw_sync_backend/condition_variable_inline.h",
        "public_overrides/pw_sync_backend/condition_variable_native.h",
    ],
    strip_include_prefix = "public_overrides",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":condition_variable_private",
    ],
)

cc_library(
    name = "condition_variable_private",
    hdrs = [
        "public/pw_sync_stl/condition_variable_inline.h",
        "public/pw_sync_stl/condition_variable_native.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_sync:condition_variable_facade",
    ],
)

# TODO: b/228998350 - Figure out how to conditionally enable this test like GN
# pw_cc_test(
#     name = "condition_variable_test",
#     deps = [
#         "//pw_sync:condition_variable_test",
#         "//pw_thread_stl:non_portable_test_thread_options",
#     ]
# )

sphinx_docs_library(
    name = "docs",
    srcs = [
        "docs.rst",
    ],
    prefix = "pw_sync_stl/",
    target_compatible_with = incompatible_with_mcu(),
)
