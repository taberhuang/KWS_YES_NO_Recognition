# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

# This file contains Emboss definitions for the logical link control and
# adaptation protocol (l2cap) frames found in the Bluetooth core specification.
# The Emboss compiler is used to generate a C++ header from this file.

[$default byte_order: "LittleEndian"]
[(cpp) namespace: "pw::bluetooth::emboss"]
# ========================= RFCOMM Frame Format =================================
# RFCOMM Spec v1.2
# Also see: ETSI TS 101 369 V7.1.0 (1999-11) and
# GSM 07.10 version 7.1.0 Release 1998


enum RfcommFrameType:
  -- ETSI TS section 5.2.1.3
  [maximum_bits: 8]
  SET_ASYNC_BALANCED_MODE                                 = 0x2f
  SET_ASYNC_BALANCED_MODE_AND_POLL_FINAL                  = 0x3f
  UNNUMBERED_ACK                                          = 0x63
  UNNUMBERED_ACK_AND_POLL_FINAL                           = 0x73
  DISCONNECT_MODE                                         = 0x0f
  DISCONNECT_MODE_AND_POLL_FINAL                          = 0x1f
  DISCONNECT                                              = 0xc3
  UNNUMBERED_INFORMATION_WITH_HEADER_CHECK                = 0xef
  UNNUMBERED_INFORMATION_WITH_HEADER_CHECK_AND_POLL_FINAL = 0xff
    -- RFCOMM extension. With Poll/Final bit set in UIH control byte, a credits
    -- field is the first byte of the payload.


enum RfcommFixedChannel:
  -- ETSI TS section 5.6
  [maximum_bits: 8]
  CONTROL = 0


enum RfcommCommandResponseAndDirection:
  -- RFCOMM Spec v1.2 Section 5.4
  -- GSM 07.10 section 5.2.1.2
  -- Commands and responses from the responder have C/R = 0. Commands and
  -- responses from the initiator have C/R = 1.
  -- For an RFCOMM session, the initiating device is given the direction bit D=1
  -- (and conversely, D=0 in the other device)
  [maximum_bits: 2]
  COMMAND_FROM_INITIATOR  = 0b11
  COMMAND_FROM_RESPONDER  = 0b00
  RESPONSE_FROM_INITIATOR = 0b01
  RESPONSE_FROM_RESPONDER = 0b10


enum RfcommLengthExtended:
  -- ETSI TS section 5.2.1.5
  [maximum_bits: 1]
  NORMAL   = 1
  EXTENDED = 0


struct RfcommFrame:
  -- RFCOMM adaptation of ETSI TS section 5.2 frame

  [requires: extended_address == true]

  0                  [+1]  bits:

    0                  [+1]                 Flag                               extended_address

    1                  [+2]                 RfcommCommandResponseAndDirection  command_response_direction

    3                  [+5]                 UInt                               channel
      -- ETSI TS 07.10 section 5.2.1.2

  1                  [+1]                   RfcommFrameType                    control
    -- ETSI TS 07.10 section 5.2.1.3

  let uih = control == RfcommFrameType.UNNUMBERED_INFORMATION_WITH_HEADER_CHECK || control == RfcommFrameType.UNNUMBERED_INFORMATION_WITH_HEADER_CHECK_AND_POLL_FINAL
    -- Helper flag to check whether frame is UIH type, regardless of whether credits are in use.

  let flow_control = control == RfcommFrameType.UNNUMBERED_INFORMATION_WITH_HEADER_CHECK_AND_POLL_FINAL
    -- Helper to check whether RFCOMM credits are allowed in this frame.

  # Overlapping with control to split up frame_type and poll_final

  1                  [+1]  bits:

    0                  [+4]                 UInt                               frame_type_1

    4                  [+1]                 UInt                               poll_final

    5                  [+3]                 UInt                               frame_type_2
      -- ETSI TS 07.10 section 5.2.1.3

  let frame_type = frame_type_1+frame_type_2*32
    -- Helper to extract frame type value without poll_final bit

  2                  [+1]  bits:

    0                  [+1]                 RfcommLengthExtended               length_extended_flag

    1                  [+7]                 UInt                               length
      -- ETSI TS 07.10 section 5.2.1.4

  if length_extended_flag == RfcommLengthExtended.EXTENDED:
    2                  [+2]  bits:

      1                  [+15]              UInt                               length_extended
        -- ETSI TS 07.10 section 5.2.1.4
        -- Note: this is defined as overlapping field with first length byte.

  let information_length = $present(length_extended) ? length_extended : length
    -- Length of the '5.2.1.4 Information Field'.
    -- Special consideration when RFCOMM credit based flow control is active:
    -- (RFCOMM spec v1.2 section 6.5.2)
    -- The length indicator field (as always) indicates the number of
    -- information octets in the following information field; however, the
    -- maximum number of allowable information octets is decreased by one to
    -- compensate for the credit field. (This is to keep the maximum L2CAP
    -- payload size constant).

  let credits_offset = $present(length_extended) ? 4 : 3

  if flow_control && channel != 0:
    credits_offset     [+1]                 UInt                               credits
      -- Credits field can appears as first byte of information when Poll/Final
      -- bit is set on UIH frames and channel is not control (0).
      -- Credits field is _not_ counted as part of information_length.

  let information_offset = $present(credits) ? credits_offset+1 : credits_offset

  information_offset [+information_length]  UInt:8[information_length]         information
    -- Payload is the RFCOMM payload contained in the 'Information Field' which
    -- may start with credits.

  let fcs_offset = information_offset+information_length

  fcs_offset         [+1]                   UInt                               fcs
    -- Frame checksum. See: GSM 07.10 TS 101 369 V6.3.0
    -- SABM, DISC, UA, DM frame types:
    --   FCS should be calculated over address, control and length fields.
    -- UIH frame type:
    --   FCS should be calculated over address and control fields.
