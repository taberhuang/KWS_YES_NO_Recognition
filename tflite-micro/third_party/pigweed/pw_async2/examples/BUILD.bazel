# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_build:pw_cc_binary.bzl", "pw_cc_binary")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

pw_cc_test(
    name = "basic",
    srcs = ["basic.cc"],
    deps = [
        "//pw_allocator:testing",
        "//pw_async2:coro",
        "//pw_async2:dispatcher",
    ],
)

# count-example-start
pw_cc_binary(
    name = "count",
    srcs = ["count.cc"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        "//pw_allocator:libc_allocator",
        "//pw_async2:allocate_task",
        "//pw_async2:coro",
        "//pw_async2:coro_or_else_task",
        "//pw_async2:dispatcher",
        "//pw_async2:system_time_provider",
        "//pw_chrono:system_clock",
        "//pw_log",
        "//pw_result",
        "//pw_status",
    ],
)
# count-example-end

pw_cc_test(
    name = "coro_blinky_loop",
    srcs = ["coro_blinky_loop.cc"],
    deps = [
        "//pw_allocator:testing",
        "//pw_async2:coro",
        "//pw_async2:dispatcher",
        "//pw_async2:simulated_time_provider",
        "//pw_async2:time_provider",
        "//pw_chrono:system_clock",
    ],
)

pw_cc_test(
    name = "inline_async_queue_with_coro_test",
    srcs = ["inline_async_queue_with_coro_test.cc"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        "//pw_allocator:libc_allocator",
        "//pw_async2:coro",
        "//pw_async2:coro_or_else_task",
        "//pw_async2:dispatcher",
        "//pw_async2:pend_func_awaitable",
        "//pw_containers:inline_async_queue",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "inline_async_queue_with_tasks_test",
    srcs = ["inline_async_queue_with_tasks_test.cc"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        "//pw_containers:inline_async_queue",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_span",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "once_send_recv",
    srcs = ["once_send_recv.cc"],
    deps = [
        "//pw_allocator:testing",
        "//pw_async2:coro",
        "//pw_async2:dispatcher",
        "//pw_async2:once_sender",
    ],
)

pw_cc_binary(
    name = "interrupt",
    srcs = ["interrupt.cc"],
    target_compatible_with = select({
        "@platforms//os:linux": [],
        "@platforms//os:macos": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        "//pw_async2:dispatcher",
        "//pw_async2:pend_func_task",
        "//pw_containers:inline_queue",
        "//pw_log",
        "//pw_sync:interrupt_spin_lock",
    ],
)

pw_cc_test(
    name = "unit_test",
    srcs = ["unit_test.cc"],
    deps = [
        "//pw_allocator:testing",
        "//pw_async2:dispatcher",
        "//pw_async2:pend_func_task",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "BUILD.bazel",
        "BUILD.gn",
        "basic.cc",
        "coro_blinky_loop.cc",
        "count.cc",
        "inline_async_queue_with_coro_test.cc",
        "inline_async_queue_with_coro_test.expected",
        "inline_async_queue_with_tasks_test.cc",
        "inline_async_queue_with_tasks_test.expected",
        "interrupt.cc",
        "once_send_recv.cc",
        "unit_test.cc",
    ],
    target_compatible_with = incompatible_with_mcu(),
)
