# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")
import("$dir_pw_chrono/backend.gni")
import("$dir_pw_protobuf_compiler/proto.gni")
import("$dir_pw_toolchain/generate_toolchain.gni")
import("$dir_pw_unit_test/test.gni")

config("public_include_path") {
  include_dirs = [ "public" ]
  visibility = [ ":*" ]
}

pw_source_set("pw_digital_io") {
  public_configs = [ ":public_include_path" ]
  public = [
    "public/pw_digital_io/digital_io.h",
    "public/pw_digital_io/internal/conversions.h",
    "public/pw_digital_io/polarity.h",
  ]
  sources = [ "digital_io.cc" ]
  public_deps = [
    "$dir_pw_toolchain:sibling_cast",
    dir_pw_assert,
    dir_pw_function,
    dir_pw_result,
    dir_pw_status,
  ]
}

pw_test("digital_io_test") {
  sources = [ "digital_io_test.cc" ]
  deps = [ ":pw_digital_io" ]
}

pw_source_set("digital_io_service") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_digital_io/digital_io_service.h" ]
  sources = [ "digital_io_service.cc" ]
  public_deps = [
    ":protos.pwpb_rpc",
    ":pw_digital_io",
  ]
}

pw_proto_library("protos") {
  sources = [ "digital_io.proto" ]
  prefix = "pw_digital_io"
}

pw_source_set("digital_io_mock") {
  public_configs = [ ":public_include_path" ]
  sources = [ "digital_io_mock.cc" ]
  public = [ "public/pw_digital_io/digital_io_mock.h" ]
  deps = [ dir_pw_log ]
  public_deps = [
    ":pw_digital_io",
    "$dir_pw_assert:check",
    "$dir_pw_chrono:system_clock",
    "$dir_pw_containers:inline_deque",
    dir_pw_result,
  ]
}

pw_test("digital_io_mock_test") {
  enable_if = pw_chrono_SYSTEM_CLOCK_BACKEND != ""
  sources = [ "digital_io_mock_test.cc" ]
  deps = [ ":digital_io_mock" ]
}

pw_test_group("tests") {
  tests = [
    ":digital_io_test",
    ":digital_io_mock_test",
  ]
}
