# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_bloat:pw_size_diff.bzl", "pw_size_diff")
load("//pw_bloat:pw_size_table.bzl", "pw_size_table")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
)

licenses(["notice"])

cc_library(
    name = "pw_bytes",
    srcs = [
        "byte_builder.cc",
    ],
    hdrs = [
        "public/pw_bytes/array.h",
        "public/pw_bytes/byte_builder.h",
        "public/pw_bytes/endian.h",
        "public/pw_bytes/span.h",
        "public/pw_bytes/suffix.h",
        "public/pw_bytes/units.h",
    ],
    strip_include_prefix = "public",
    deps = [
        ":bit",
        "//pw_containers:iterator",
        "//pw_polyfill",
        "//pw_preprocessor",
        "//pw_span",
        "//pw_status",
    ],
)

cc_library(
    name = "alignment",
    srcs = [
        "alignment.cc",
    ],
    hdrs = ["public/pw_bytes/alignment.h"],
    strip_include_prefix = "public",
    deps = [
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_numeric:checked_arithmetic",
        "//third_party/fuchsia:stdcompat",
    ],
)

cc_library(
    name = "bit",
    hdrs = ["public/pw_bytes/bit.h"],
    strip_include_prefix = "public",
    deps = ["//third_party/fuchsia:stdcompat"],
)

cc_library(
    name = "packed_ptr",
    hdrs = ["public/pw_bytes/packed_ptr.h"],
    strip_include_prefix = "public",
    deps = [
        "//pw_assert:assert",
        "//third_party/fuchsia:stdcompat",
    ],
)

pw_cc_test(
    name = "alignment_test",
    srcs = ["alignment_test.cc"],
    deps = [
        ":alignment",
        "//third_party/fuchsia:stdcompat",
    ],
)

pw_cc_test(
    name = "array_test",
    srcs = ["array_test.cc"],
    deps = [":pw_bytes"],
)

pw_cc_test(
    name = "bit_test",
    srcs = ["bit_test.cc"],
    features = ["-conversion_warnings"],
    deps = [":bit"],
)

pw_cc_test(
    name = "byte_builder_test",
    srcs = ["byte_builder_test.cc"],
    features = ["-conversion_warnings"],
    deps = [":pw_bytes"],
)

pw_cc_test(
    name = "endian_test",
    srcs = ["endian_test.cc"],
    deps = [
        ":pw_bytes",
        "//pw_unit_test:constexpr",
    ],
)

pw_cc_test(
    name = "packed_ptr_test",
    srcs = ["packed_ptr_test.cc"],
    features = ["-ctad_warnings"],
    deps = [
        ":packed_ptr",
        "//pw_compilation_testing:negative_compilation_testing",
    ],
)

pw_cc_test(
    name = "span_test",
    srcs = ["span_test.cc"],
    deps = [
        ":pw_bytes",
        "//pw_compilation_testing:negative_compilation_testing",
    ],
)

pw_cc_test(
    name = "suffix_test",
    srcs = ["suffix_test.cc"],
    deps = [
        ":pw_bytes",
        "//pw_compilation_testing:negative_compilation_testing",
        "//pw_polyfill",
    ],
)

pw_cc_test(
    name = "units_test",
    srcs = ["units_test.cc"],
    deps = [":pw_bytes"],
)

filegroup(
    name = "doxygen",
    srcs = [
        "public/pw_bytes/alignment.h",
        "public/pw_bytes/array.h",
        "public/pw_bytes/bit.h",
        "public/pw_bytes/byte_builder.h",
        "public/pw_bytes/endian.h",
        "public/pw_bytes/packed_ptr.h",
        "public/pw_bytes/span.h",
        "public/pw_bytes/suffix.h",
        "public/pw_bytes/units.h",
    ],
)

pw_size_diff(
    name = "with_byte_builder_size_diff",
    base = "//pw_bytes/size_report:without_byte_builder",
    label = "Using ByteBuilder vs. not using it",
    target = "//pw_bytes/size_report:with_byte_builder",
)

pw_size_table(
    name = "byte_builder_size_report",
    reports = [
        ":with_byte_builder_size_diff",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "Kconfig",
        "api.rst",
        "code_size.rst",
        "design.rst",
        "docs.rst",
        "guide.rst",
        ":byte_builder_size_report",
    ],
    prefix = "pw_bytes/",
    target_compatible_with = incompatible_with_mcu(),
)
