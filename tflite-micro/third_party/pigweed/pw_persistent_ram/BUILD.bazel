# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_bloat:pw_size_diff.bzl", "pw_size_diff")
load("//pw_bloat:pw_size_table.bzl", "pw_size_table")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

cc_library(
    name = "pw_persistent_ram",
    srcs = ["persistent_buffer.cc"],
    hdrs = [
        "public/pw_persistent_ram/persistent.h",
        "public/pw_persistent_ram/persistent_buffer.h",
    ],
    strip_include_prefix = "public",
    deps = [
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_checksum",
        "//pw_stream",
    ],
)

cc_library(
    name = "flat_file_system_entry",
    hdrs = [
        "public/pw_persistent_ram/flat_file_system_entry.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        "//pw_file:flat_file_system",
        "//pw_persistent_ram",
    ],
)

pw_cc_test(
    name = "persistent_test",
    srcs = [
        "persistent_test.cc",
    ],
    features = ["-conversion_warnings"],
    # The test contains intentional uninitialized memory access.
    tags = ["nomsan"],
    deps = [
        ":pw_persistent_ram",
        "//pw_random",
    ],
)

pw_cc_test(
    name = "persistent_buffer_test",
    srcs = [
        "persistent_buffer_test.cc",
    ],
    # The test contains intentional uninitialized memory access.
    tags = ["nomsan"],
    deps = [
        ":pw_persistent_ram",
        "//pw_random",
    ],
)

pw_cc_test(
    name = "flat_file_system_entry_test",
    srcs = [
        "flat_file_system_entry_test.cc",
    ],
    features = [
        "-conversion_warnings",
        "-ctad_warnings",
    ],
    deps = [
        ":flat_file_system_entry",
    ],
)

pw_size_diff(
    name = "persistent_with_pw_checksum_size_diff",
    base = "//pw_persistent_ram/size_report:persistent_base",
    label = "Persistent including pw_checksum's CRC16",
    target = "//pw_persistent_ram/size_report:persistent",
)

pw_size_diff(
    name = "persistent_without_pw_checksum_size_diff",
    base = "//pw_persistent_ram/size_report:persistent_base_with_crc16",
    label = "Persistent without pw_checksum's CRC16",
    target = "//pw_persistent_ram/size_report:persistent",
)

pw_size_table(
    name = "persistent_size",
    reports = [
        ":persistent_with_pw_checksum_size_diff",
        ":persistent_without_pw_checksum_size_diff",
    ],
)

filegroup(
    name = "doxygen",
    srcs = [
        "public/pw_persistent_ram/persistent.h",
        "public/pw_persistent_ram/persistent_buffer.h",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "docs.rst",
        ":persistent_size",
    ],
    prefix = "pw_persistent_ram/",
    target_compatible_with = incompatible_with_mcu(),
)
