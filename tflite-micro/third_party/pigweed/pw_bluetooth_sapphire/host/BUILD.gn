# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

# Note, this file is not copybara'd from upstream Fuchsia.

import("//build_overrides/pigweed.gni")
import("$dir_pigweed/third_party/emboss/emboss.gni")
import("$dir_pw_assert/backend.gni")
import("$dir_pw_async/backend.gni")
import("$dir_pw_bluetooth_sapphire/sapphire.gni")
import("$dir_pw_function/function.gni")
import("$dir_pw_fuzzer/fuzzer.gni")
import("$dir_pw_unit_test/test.gni")

# LINT.IfChange(copts)
# Common C++ flags used in bt-host to ensure it builds in Pigweed and downstreams.
# Note Fuchsia upstream has its own version of copts since this file is not
# copybara'd.
config("copts") {
  cflags_cc = [
    # TODO: https://fxbug.dev/345799180 - Remove once code doesn't have unused parameters.
    "-Wno-unused-parameter",
  ]
}

# LINT.ThenChange(variables.bzl:copts)

group("host") {
  public_deps = [
    "att",
    "common",
    "gap",
    "gatt",
    "hci",
    "hci-spec",
    "iso",
    "l2cap",
    "sco",
    "sdp",
    "sm",
    "transport",
  ]
}

pw_test_group("tests") {
  enable_if = pw_bluetooth_sapphire_ENABLED

  tests = [
    "att:tests",
    "common:tests",
    "gap:tests",
    "gatt:tests",
    "hci:tests",
    "hci-spec:tests",
    "iso:tests",
    "l2cap:tests",
    "sco:tests",
    "sdp:tests",
    "sm:tests",
    "testing:tests",
    "transport:tests",
  ]
}

pw_fuzzer_group("fuzzers") {
  fuzzers = [
    "common:advertising_data_fuzzer",
    "gap:peer_cache_fuzzer",
    "l2cap:basic_mode_rx_engine_fuzzer",
    "l2cap:bredr_dynamic_channel_registry_fuzzer",
    "l2cap:channel_configuration_fuzzer",
    "l2cap:common_handler_fuzzer",
    "l2cap:enhanced_retransmission_mode_engines_fuzzer",
    "l2cap:l2cap_fuzzer",
    "sdp:data_element_fuzzer",
    "sdp:pdu_fuzzer",
    "sm:valid_packet_reader_fuzzer",
  ]
}
