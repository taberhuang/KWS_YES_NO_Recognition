# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

cc_library(
    name = "config",
    hdrs = [
        "public/pw_log_rpc/internal/config.h",
    ],
    strip_include_prefix = "public",
    visibility = ["//visibility:private"],
    deps = [
        ":config_override",
    ],
)

label_flag(
    name = "config_override",
    build_setting_default = "//pw_build:default_module_config",
)

cc_library(
    name = "log_service",
    srcs = [
        "log_service.cc",
    ],
    hdrs = [
        "public/pw_log_rpc/internal/log_config.h",
        "public/pw_log_rpc/log_service.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":config",
        ":log_filter",
        ":rpc_log_drain",
        "//pw_log",
        "//pw_log:log_proto_pwpb",
        "//pw_log:log_proto_raw_rpc",
    ],
)

cc_library(
    name = "log_filter_service",
    srcs = ["log_filter_service.cc"],
    hdrs = ["public/pw_log_rpc/log_filter_service.h"],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":log_filter",
        "//pw_log",
        "//pw_log:log_proto_pwpb",
        "//pw_log:log_proto_raw_rpc",
        "//pw_protobuf",
        "//pw_protobuf:bytes_utils",
    ],
)

cc_library(
    name = "log_filter",
    srcs = [
        "log_filter.cc",
    ],
    hdrs = [
        "public/pw_log_rpc/log_filter.h",
        "public/pw_log_rpc/log_filter_map.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":config",
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_log:log_proto_pwpb",
        "//pw_protobuf",
        "//pw_status",
    ],
)

cc_library(
    name = "rpc_log_drain",
    srcs = [
        "rpc_log_drain.cc",
    ],
    hdrs = [
        "public/pw_log_rpc/rpc_log_drain.h",
        "public/pw_log_rpc/rpc_log_drain_map.h",
    ],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":config",
        ":log_filter",
        "//pw_assert:assert",
        "//pw_chrono:system_clock",
        "//pw_function",
        "//pw_log:log_proto_pwpb",
        "//pw_log:log_proto_raw_rpc",
        "//pw_multisink",
        "//pw_protobuf",
        "//pw_result",
        "//pw_status",
        "//pw_sync:lock_annotations",
        "//pw_sync:mutex",
    ],
)

cc_library(
    name = "rpc_log_drain_thread",
    hdrs = ["public/pw_log_rpc/rpc_log_drain_thread.h"],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":log_service",
        ":rpc_log_drain",
        "//pw_chrono:system_clock",
        "//pw_multisink",
        "//pw_result",
        "//pw_rpc/raw:server_api",
        "//pw_status",
        "//pw_sync:timed_thread_notification",
        "//pw_thread:thread",
        "//pw_thread:thread_core",
    ],
)

cc_library(
    name = "test_utils",
    testonly = True,
    srcs = ["test_utils.cc"],
    hdrs = ["pw_log_rpc_private/test_utils.h"],
    features = ["-conversion_warnings"],
    deps = [
        "//pw_bytes",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_log:log_proto_pwpb",
        "//pw_log_tokenized:headers",
        "//pw_protobuf",
        "//pw_protobuf:bytes_utils",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "log_service_test",
    srcs = ["log_service_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":log_filter",
        ":log_service",
        ":test_utils",
        "//pw_assert:check",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_log:log_proto_pwpb",
        "//pw_log:proto_utils",
        "//pw_log_tokenized:headers",
        "//pw_protobuf",
        "//pw_protobuf:bytes_utils",
        "//pw_result",
        "//pw_rpc/raw:test_method_context",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "log_filter_service_test",
    srcs = ["log_filter_service_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":log_filter",
        ":log_filter_service",
        "//pw_log:log_proto_pwpb",
        "//pw_protobuf",
        "//pw_protobuf:bytes_utils",
        "//pw_result",
        "//pw_rpc/raw:test_method_context",
    ],
)

pw_cc_test(
    name = "log_filter_test",
    srcs = ["log_filter_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":log_filter",
        "//pw_log:log_proto_pwpb",
        "//pw_log:proto_utils",
        "//pw_log_tokenized:headers",
        "//pw_result",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "rpc_log_drain_test",
    srcs = ["rpc_log_drain_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: https://pwbug.dev/325509758 - Doesn't work on the Pico yet; hangs
    # indefinitely.
    target_compatible_with = select({
        "//pw_build/constraints/chipset:rp2040": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":log_service",
        ":rpc_log_drain",
        ":test_utils",
        "//pw_bytes",
        "//pw_log:log_proto_pwpb",
        "//pw_log:proto_utils",
        "//pw_multisink",
        "//pw_protobuf",
        "//pw_rpc",
        "//pw_rpc/raw:server_api",
        "//pw_rpc/raw:test_method_context",
        "//pw_status",
        "//pw_sync:mutex",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "docs.rst",
    ],
    prefix = "pw_log_rpc/",
    target_compatible_with = incompatible_with_mcu(),
)
