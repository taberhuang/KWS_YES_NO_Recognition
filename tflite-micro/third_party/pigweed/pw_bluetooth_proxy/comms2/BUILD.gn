# Copyright 2025 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")
import("$dir_pw_unit_test/test.gni")

config("public_include_path") {
  include_dirs = [ "public" ]
}

pw_source_set("packets") {
  public_configs = [ ":public_include_path" ]
  public = [
    "public/pw_bluetooth_proxy/comms2/embossed_multibuf.h",
    "public/pw_bluetooth_proxy/comms2/h4_packet.h",
  ]
  sources = [ "h4_packet.cc" ]
  deps = [ "$dir_pw_assert:check" ]
  public_deps = [
    "$dir_pw_async2:dispatcher",
    "$dir_pw_bluetooth:emboss_hci_data",
    "$dir_pw_bluetooth:emboss_hci_h4",
    "$dir_pw_containers:intrusive_map",
    "$dir_pw_multibuf:multibuf_v2",
    "$dir_pw_span:cast",
    dir_pw_bytes,
    dir_pw_result,
    dir_pw_status,
  ]
}

pw_test("packets_test") {
  sources = [ "h4_packet_test.cc" ]
  deps = [
    ":packets",
    "$dir_pw_allocator:testing",
    "$dir_pw_bluetooth:emboss_hci_commands",
    dir_pw_bytes,
    dir_pw_span,
  ]
}

pw_source_set("proxy") {
  public_configs = [ ":public_include_path" ]
  sources = [
    "l2cap_task.cc",
    "proxy.cc",
  ]
  public = [
    "public/pw_bluetooth_proxy/comms2/direction.h",
    "public/pw_bluetooth_proxy/comms2/l2cap_task.h",
    "public/pw_bluetooth_proxy/comms2/proxy.h",
  ]
  deps = [
    "$dir_pw_assert",
    "$dir_pw_bluetooth:emboss_hci_commands",
    "$dir_pw_bluetooth:emboss_hci_events",
    "$dir_pw_log",
  ]
  public_deps = [
    ":packets",
    "$dir_pw_allocator:chunk_pool",
    "$dir_pw_async2:dispatcher",
    "$dir_pw_channel:packet_channel",
    "$dir_pw_channel:packet_proxy",
    "$dir_pw_containers:inline_async_queue",
    "$dir_pw_containers:vector",
  ]
}

pw_cc_test("proxy_test") {
  sources = [ "proxy_test.cc" ]
  deps = [
    ":proxy",
    "$dir_pw_allocator:testing",
    "$dir_pw_async2:pend_func_task",
    "$dir_pw_channel:packet_channel",
    "$dir_pw_channel:test_packet_channel",
    dir_pw_bytes,
  ]
}
