# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_bloat:pw_size_diff.bzl", "pw_size_diff")
load("//pw_bloat:pw_size_table.bzl", "pw_size_table")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

cc_library(
    name = "pw_kvs",
    srcs = [
        "alignment.cc",
        "checksum.cc",
        "entry.cc",
        "entry_cache.cc",
        "flash_memory.cc",
        "format.cc",
        "key_value_store.cc",
        "pw_kvs_private/config.h",
        "sectors.cc",
    ],
    hdrs = [
        "public/pw_kvs/alignment.h",
        "public/pw_kvs/checksum.h",
        "public/pw_kvs/crc16_checksum.h",
        "public/pw_kvs/flash_memory.h",
        "public/pw_kvs/format.h",
        "public/pw_kvs/internal/entry.h",
        "public/pw_kvs/internal/entry_cache.h",
        "public/pw_kvs/internal/hash.h",
        "public/pw_kvs/internal/key_descriptor.h",
        "public/pw_kvs/internal/sectors.h",
        "public/pw_kvs/internal/span_traits.h",
        "public/pw_kvs/io.h",
        "public/pw_kvs/key_value_store.h",
    ],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":config_override",
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_bytes:alignment",
        "//pw_checksum",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_polyfill",
        "//pw_span",
        "//pw_status",
        "//pw_stream",
    ],
)

label_flag(
    name = "config_override",
    build_setting_default = "//pw_build:default_module_config",
)

cc_library(
    name = "crc16",
    hdrs = [
        "public/pw_kvs/crc16_checksum.h",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":pw_kvs",
        "//pw_checksum",
        "//pw_span",
    ],
)

cc_library(
    name = "flash_test_partition",
    hdrs = ["public/pw_kvs/flash_test_partition.h"],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [":pw_kvs"],
)

cc_library(
    name = "test_key_value_store",
    hdrs = ["public/pw_kvs/test_key_value_store.h"],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":pw_kvs",
        "//pw_sync:borrow",
    ],
)

cc_library(
    name = "fake_flash",
    srcs = [
        "fake_flash_memory.cc",
    ],
    hdrs = [
        "public/pw_kvs/fake_flash_memory.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":pw_kvs",
        "//pw_containers:vector",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
    ],
)

cc_library(
    name = "flash_partition_with_logical_sectors",
    hdrs = [
        "public/pw_kvs/flash_partition_with_logical_sectors.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_1_aligned_partition",
    srcs = [
        "fake_flash_test_partition.cc",
    ],
    hdrs = [
        "public/pw_kvs/flash_test_partition.h",
    ],
    defines = [
        "PW_FLASH_TEST_SECTORS=6U",
        "PW_FLASH_TEST_SECTOR_SIZE=4096U",
        "PW_FLASH_TEST_ALIGNMENT=1U",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":fake_flash",
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_1_aligned_4_logical_partition",
    srcs = [
        "fake_flash_test_logical_sector_partition.cc",
    ],
    hdrs = [
        "public/pw_kvs/flash_test_partition.h",
    ],
    defines = [
        "PW_FLASH_TEST_SECTORS=24U",
        "PW_FLASH_TEST_SECTOR_SIZE=4096U",
        "PW_FLASH_TEST_ALIGNMENT=1U",
        "PW_FLASH_TEST_SECTORS_PER_LOGICAL_SECTOR=4U",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":fake_flash",
        ":flash_partition_with_logical_sectors",
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_12_byte_partition",
    srcs = ["fake_flash_test_partition.cc"],
    hdrs = ["public/pw_kvs/flash_test_partition.h"],
    defines = [
        "PW_FLASH_TEST_SECTORS=3",
        "PW_FLASH_TEST_SECTOR_SIZE=4",
        "PW_FLASH_TEST_ALIGNMENT=4",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":fake_flash",
        ":flash_test_partition",
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_16_aligned_partition",
    srcs = [
        "fake_flash_test_partition.cc",
    ],
    hdrs = [
        "public/pw_kvs/flash_test_partition.h",
    ],
    defines = [
        "PW_FLASH_TEST_SECTORS=6U",
        "PW_FLASH_TEST_SECTOR_SIZE=4096U",
        "PW_FLASH_TEST_ALIGNMENT=16",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":fake_flash",
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_64_aligned_partition",
    srcs = [
        "fake_flash_test_partition.cc",
    ],
    hdrs = [
        "public/pw_kvs/flash_test_partition.h",
    ],
    defines = [
        "PW_FLASH_TEST_SECTORS=6U",
        "PW_FLASH_TEST_SECTOR_SIZE=4096U",
        "PW_FLASH_TEST_ALIGNMENT=64U",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":fake_flash",
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_256_aligned_partition",
    srcs = [
        "fake_flash_test_partition.cc",
    ],
    hdrs = [
        "public/pw_kvs/flash_test_partition.h",
    ],
    defines = [
        "PW_FLASH_TEST_SECTORS=6U",
        "PW_FLASH_TEST_SECTOR_SIZE=4096U",
        "PW_FLASH_TEST_ALIGNMENT=256U",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":fake_flash",
        ":pw_kvs",
    ],
)

cc_library(
    name = "fake_flash_test_key_value_store",
    srcs = [
        "fake_flash_test_key_value_store.cc",
    ],
    hdrs = [
        "public/pw_kvs/test_key_value_store.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    deps = [
        ":crc16",
        ":fake_flash",
        ":pw_kvs",
        "//pw_sync:borrow",
    ],
)

cc_library(
    name = "test_partition",
    srcs = [
        "flash_partition_with_stats.cc",
    ],
    hdrs = [
        "public/pw_kvs/flash_partition_with_stats.h",
    ],
    features = ["-conversion_warnings"],
    strip_include_prefix = "public",
    target_compatible_with = incompatible_with_mcu(),
    visibility = ["//visibility:private"],
    deps = [
        "//pw_containers:vector",
        "//pw_kvs",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "alignment_test",
    srcs = [
        "alignment_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":pw_kvs",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "checksum_test",
    srcs = ["checksum_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":crc16",
        ":pw_kvs",
        "//pw_checksum",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "converts_to_span_test",
    srcs = ["converts_to_span_test.cc"],
    features = ["-conversion_warnings"],
    deps = [":pw_kvs"],
)

pw_cc_test(
    name = "entry_test",
    srcs = [
        "entry_test.cc",
    ],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash",
        ":pw_kvs",
        "//pw_log",
        "//pw_span",
    ],
)

pw_cc_test(
    name = "entry_cache_test",
    srcs = ["entry_cache_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_stream_test",
    srcs = ["flash_partition_stream_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash",
        ":pw_kvs",
        "//pw_log",
        "//pw_random",
    ],
)

cc_library(
    name = "flash_partition_test_100_iterations",
    testonly = True,
    srcs = ["flash_partition_test.cc"],
    defines = [
        "PW_FLASH_TEST_ITERATIONS=100",
        "PW_FLASH_TEST_WRITE_SIZE=1",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":flash_test_partition",
        ":pw_kvs",
        "//pw_log",
        "//pw_unit_test",
    ],
)

cc_library(
    name = "flash_partition_test_2_iterations",
    testonly = True,
    srcs = ["flash_partition_test.cc"],
    defines = [
        "PW_FLASH_TEST_ITERATIONS=2",
        "PW_FLASH_TEST_WRITE_SIZE=1",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":flash_test_partition",
        ":pw_kvs",
        "//pw_log",
        "//pw_unit_test",
    ],
)

cc_library(
    name = "flash_partition_test_100_iterations_256_write",
    testonly = True,
    srcs = ["flash_partition_test.cc"],
    defines = [
        "PW_FLASH_TEST_ITERATIONS=100",
        "PW_FLASH_TEST_WRITE_SIZE=256",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":flash_test_partition",
        ":pw_kvs",
        "//pw_log",
        "//pw_unit_test",
    ],
)

cc_library(
    name = "flash_partition_test_2_iterations_256_write",
    testonly = True,
    srcs = ["flash_partition_test.cc"],
    defines = [
        "PW_FLASH_TEST_ITERATIONS=2",
        "PW_FLASH_TEST_WRITE_SIZE=256",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":flash_test_partition",
        ":pw_kvs",
        "//pw_log",
        "//pw_unit_test",
    ],
)

cc_library(
    name = "key_value_store_initialized_test",
    testonly = True,
    srcs = ["key_value_store_initialized_test.cc"],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    deps = [
        ":crc16",
        ":flash_test_partition",
        ":pw_kvs",
        "//pw_bytes",
        "//pw_checksum",
        "//pw_log",
        "//pw_string:builder",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "flash_partition_1_alignment_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_1_aligned_partition",
        ":flash_partition_test_100_iterations",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_1_alignment_4_logical_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_1_aligned_4_logical_partition",
        ":flash_partition_test_2_iterations",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_16_alignment_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_16_aligned_partition",
        ":flash_partition_test_100_iterations",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_64_alignment_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_64_aligned_partition",
        ":flash_partition_test_100_iterations",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_256_alignment_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_256_aligned_partition",
        ":flash_partition_test_100_iterations",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_256_write_size_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_1_aligned_partition",
        ":flash_partition_test_100_iterations_256_write",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "flash_partition_4_logical_256_write_size_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash_1_aligned_4_logical_partition",
        ":flash_partition_test_2_iterations_256_write",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "key_value_store_test",
    srcs = ["key_value_store_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash",
        ":pw_kvs",
        "//pw_assert:check",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "key_value_store_1_alignment_flash_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash_1_aligned_partition",
        ":key_value_store_initialized_test",
        ":pw_kvs",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "key_value_store_1_alignment_4_logical_flash_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash_1_aligned_4_logical_partition",
        ":key_value_store_initialized_test",
        ":pw_kvs",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "key_value_store_16_alignment_flash_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash_16_aligned_partition",
        ":key_value_store_initialized_test",
        ":pw_kvs",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "key_value_store_64_alignment_flash_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash_64_aligned_partition",
        ":key_value_store_initialized_test",
        ":pw_kvs",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "key_value_store_256_alignment_flash_test",
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash_256_aligned_partition",
        ":key_value_store_initialized_test",
        ":pw_kvs",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "fake_flash_test_key_value_store_test",
    srcs = ["test_key_value_store_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash_test_key_value_store",
        ":pw_kvs",
        "//pw_log",
        "//pw_status",
        "//pw_sync:borrow",
    ],
)

pw_cc_test(
    name = "key_value_store_binary_format_test",
    srcs = [
        "key_value_store_binary_format_test.cc",
    ],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "key_value_store_put_test",
    srcs = ["key_value_store_put_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash",
        ":pw_kvs",
        ":test_partition",
        "//pw_assert:check",
        "//pw_checksum",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "key_value_store_map_test",
    srcs = ["key_value_store_map_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":crc16",
        ":fake_flash",
        ":pw_kvs",
        ":test_partition",
        "//pw_checksum",
        "//pw_log",
        "//pw_log:pw_log.facade",
        "//pw_span",
    ],
)

pw_cc_test(
    name = "sectors_test",
    srcs = ["sectors_test.cc"],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash",
        ":pw_kvs",
        "//pw_log",
    ],
)

pw_cc_test(
    name = "key_value_store_wear_test",
    srcs = [
        "key_value_store_wear_test.cc",
    ],
    features = ["-conversion_warnings"],
    # TODO: b/234883746 - KVS tests are not compatible with device builds as they
    # use features such as std::map and are computationally expensive. Solving
    # this requires a more complex capabilities-based build and configuration
    # system which allowing enabling specific tests for targets that support
    # them and modifying test parameters for different targets.
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":fake_flash",
        ":pw_kvs",
        ":test_partition",
        "//pw_log",
    ],
)

filegroup(
    name = "doxygen",
    srcs = [
        "public/pw_kvs/key_value_store.h",
        "pw_kvs_private/config.h",
    ],
)

pw_size_diff(
    name = "with_kvs_size_diff",
    base = "//pw_kvs/size_report:base_with_only_flash",
    label = "KeyValueStore",
    target = "//pw_kvs/size_report:with_kvs",
)

pw_size_diff(
    name = "base_with_only_flash_size_diff",
    base = "//pw_kvs/size_report:base",
    label = "FlashPartition",
    target = "//pw_kvs/size_report:base_with_only_flash",
)

pw_size_table(
    name = "kvs_size",
    reports = [
        ":with_kvs_size_diff",
        ":base_with_only_flash_size_diff",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "docs.rst",
        ":kvs_size",
    ],
    prefix = "pw_kvs/",
    target_compatible_with = incompatible_with_mcu(),
)
