# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "boolean_constraint_value", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
)

licenses(["notice"])

cc_library(
    name = "pw_stream",
    srcs = [
        "memory_stream.cc",
    ],
    hdrs = [
        "public/pw_stream/memory_stream.h",
        "public/pw_stream/null_stream.h",
        "public/pw_stream/seek.h",
        "public/pw_stream/stream.h",
    ],
    strip_include_prefix = "public",
    deps = [
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_polyfill",
        "//pw_result",
        "//pw_span",
        "//pw_status",
        "//pw_toolchain:sibling_cast",
    ],
)

boolean_constraint_value(name = "socket_stream_compatible")

cc_library(
    name = "socket_stream",
    srcs = ["socket_stream.cc"],
    hdrs = ["public/pw_stream/socket_stream.h"],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    target_compatible_with = incompatible_with_mcu(unless_platform_has = ":socket_stream_compatible"),
    deps = [
        ":pw_stream",
        "//pw_log",
        "//pw_result",
        "//pw_span",
        "//pw_status",
        "//pw_string:to_string",
        "//pw_sync:lock_annotations",
        "//pw_sync:mutex",
        "//pw_sys_io",
    ],
)

cc_library(
    name = "sys_io_stream",
    hdrs = ["public/pw_stream/sys_io_stream.h"],
    strip_include_prefix = "public",
    deps = [
        "//pw_bytes",
        "//pw_stream",
        "//pw_sys_io",
    ],
)

cc_library(
    name = "std_file_stream",
    srcs = ["std_file_stream.cc"],
    hdrs = ["public/pw_stream/std_file_stream.h"],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    target_compatible_with = incompatible_with_mcu(),
    deps = [":pw_stream"],
)

cc_library(
    name = "interval_reader",
    srcs = ["interval_reader.cc"],
    hdrs = ["public/pw_stream/interval_reader.h"],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":pw_stream",
        "//pw_assert:assert",
        "//pw_status",
    ],
)

cc_library(
    name = "limited_stream",
    hdrs = ["public/pw_stream/limited_stream.h"],
    strip_include_prefix = "public",
    deps = [
        ":pw_stream",
        "//pw_status",
    ],
)

cc_library(
    name = "mpsc_stream",
    srcs = ["mpsc_stream.cc"],
    hdrs = ["public/pw_stream/mpsc_stream.h"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":pw_stream",
        "//pw_bytes",
        "//pw_chrono:system_clock.facade",
        "//pw_containers:intrusive_list",
        "//pw_function",
        "//pw_status",
        "//pw_sync:lock_annotations",
        "//pw_sync:mutex",
        "//pw_sync:timed_thread_notification",
    ],
)

pw_cc_test(
    name = "limited_stream_test",
    srcs = ["limited_stream_test.cc"],
    deps = [
        ":limited_stream",
        ":pw_stream",
        "//pw_bytes",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "memory_stream_test",
    srcs = ["memory_stream_test.cc"],
    deps = [
        ":pw_stream",
        "//pw_preprocessor",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "null_stream_test",
    srcs = ["null_stream_test.cc"],
    deps = [":pw_stream"],
)

pw_cc_test(
    name = "std_file_stream_test",
    srcs = ["std_file_stream_test.cc"],
    features = ["-conversion_warnings"],
    target_compatible_with = incompatible_with_mcu(),
    deps = [
        ":std_file_stream",
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_containers:algorithm",
        "//pw_random",
        "//pw_result",
        "//pw_span",
        "//pw_status",
        "//pw_string:builder",
    ],
)

pw_cc_test(
    name = "seek_test",
    srcs = ["seek_test.cc"],
    deps = [":pw_stream"],
)

pw_cc_test(
    name = "stream_test",
    srcs = ["stream_test.cc"],
    deps = [
        ":pw_stream",
        "//pw_assert:check",
        "//pw_bytes",
        "//pw_containers:to_array",
        "//pw_span",
    ],
)

pw_cc_test(
    name = "interval_reader_test",
    srcs = ["interval_reader_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":interval_reader",
        ":pw_stream",
        "//pw_result",
    ],
)

pw_cc_test(
    name = "socket_stream_test",
    srcs = ["socket_stream_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":socket_stream",
        "//pw_result",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "mpsc_stream_test",
    srcs = ["mpsc_stream_test.cc"],
    features = ["-ctad_warnings"],
    # TODO: b/361369435 - This test crashes on rp2.
    target_compatible_with = select({
        "@pico-sdk//bazel/constraint:rp2040": ["@platforms//:incompatible"],
        "@pico-sdk//bazel/constraint:rp2350": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    deps = [
        ":mpsc_stream",
        "//pw_containers:vector",
        "//pw_fuzzer:fuzztest",
        "//pw_random",
        "//pw_thread:test_thread_context",
        "//pw_thread:thread",
    ],
)

filegroup(
    name = "doxygen",
    srcs = [
        "public/pw_stream/limited_stream.h",
        "public/pw_stream/stream.h",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "Kconfig",
        "backends.rst",
        "docs.rst",
        "//pw_stream/py:docs",
    ],
    prefix = "pw_stream/",
    target_compatible_with = incompatible_with_mcu(),
)
