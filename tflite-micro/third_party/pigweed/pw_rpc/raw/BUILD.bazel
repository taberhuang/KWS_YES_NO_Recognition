# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = [
        "-layering_check",
        "-ctad_warnings",
    ],
)

licenses(["notice"])

cc_library(
    name = "server_api",
    srcs = [
        "method.cc",
    ],
    hdrs = [
        "public/pw_rpc/raw/internal/method.h",
        "public/pw_rpc/raw/internal/method_union.h",
        "public/pw_rpc/raw/server_reader_writer.h",
    ],
    strip_include_prefix = "public",
    deps = [
        "//pw_bytes",
        "//pw_rpc",
        "//pw_rpc:internal_packet_pwpb",
        "//pw_status",
    ],
)

cc_library(
    name = "client_api",
    hdrs = ["public/pw_rpc/raw/client_reader_writer.h"],
    strip_include_prefix = "public",
    deps = [
        "//pw_bytes",
        "//pw_rpc",
        "//pw_rpc:internal_packet_pwpb",
    ],
)

cc_library(
    name = "fake_channel_output",
    hdrs = ["public/pw_rpc/raw/fake_channel_output.h"],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    deps = ["//pw_rpc:fake_channel_output"],
)

cc_library(
    name = "test_method_context",
    hdrs = ["public/pw_rpc/raw/test_method_context.h"],
    strip_include_prefix = "public",
    deps = [
        ":fake_channel_output",
        ":server_api",
        "//pw_assert:assert",
        "//pw_containers:vector",
        "//pw_preprocessor",
        "//pw_rpc",
        "//pw_rpc:internal_test_utils",
    ],
)

cc_library(
    name = "client_testing",
    srcs = ["client_testing.cc"],
    hdrs = ["public/pw_rpc/raw/client_testing.h"],
    implementation_deps = [
        "//pw_assert:check",
        "//pw_log",
    ],
    strip_include_prefix = "public",
    deps = [
        ":fake_channel_output",
        "//pw_bytes",
        "//pw_rpc",
    ],
)

pw_cc_test(
    name = "client_test",
    srcs = [
        "client_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":client_api",
        ":client_testing",
        "//pw_rpc",
    ],
)

pw_cc_test(
    name = "client_reader_writer_test",
    srcs = ["client_reader_writer_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":client_api",
        ":client_testing",
        "//pw_bytes",
        "//pw_rpc",
        "//pw_rpc:pw_rpc_test_raw_rpc",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "codegen_test",
    srcs = [
        "codegen_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":client_testing",
        ":test_method_context",
        "//pw_protobuf",
        "//pw_rpc",
        "//pw_rpc:pw_rpc_test_pwpb",
        "//pw_rpc:pw_rpc_test_raw_rpc",
    ],
)

pw_cc_test(
    name = "method_test",
    srcs = [
        "method_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":server_api",
        "//pw_bytes",
        "//pw_containers:algorithm",
        "//pw_protobuf",
        "//pw_rpc",
        "//pw_rpc:internal_test_utils",
        "//pw_rpc:pw_rpc_test_pwpb",
    ],
)

pw_cc_test(
    name = "method_info_test",
    srcs = [
        "method_info_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        "//pw_rpc",
        "//pw_rpc:internal_test_utils",
        "//pw_rpc:pw_rpc_test_raw_rpc",
    ],
)

pw_cc_test(
    name = "method_union_test",
    srcs = [
        "method_union_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":server_api",
        "//pw_bytes",
        "//pw_protobuf",
        "//pw_rpc",
        "//pw_rpc:internal_test_utils",
        "//pw_rpc:pw_rpc_test_pwpb",
    ],
)

pw_cc_test(
    name = "server_reader_writer_test",
    srcs = ["server_reader_writer_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":fake_channel_output",
        ":server_api",
        "//pw_bytes",
        "//pw_rpc",
        "//pw_rpc:pw_rpc_test_pwpb",
        "//pw_rpc:pw_rpc_test_raw_rpc",
        "//pw_status",
    ],
)

# Negative compilation testing is not supported by Bazel. Build this as a
# regular unit for now test.
pw_cc_test(
    name = "service_nc_test",
    srcs = ["service_nc_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        "//pw_compilation_testing:negative_compilation_testing",
        "//pw_rpc:pw_rpc_test_raw_rpc",
    ],
)

pw_cc_test(
    name = "stub_generation_test",
    srcs = ["stub_generation_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        "//pw_rpc:pw_rpc_test_pwpb",
        "//pw_rpc:pw_rpc_test_raw_rpc",
    ],
)

pw_cc_test(
    name = "synchronous_call_test",
    srcs = ["synchronous_call_test.cc"],
    features = ["-conversion_warnings"],
    deps = [
        ":fake_channel_output",
        "//pw_assert:check",
        "//pw_chrono:system_clock",
        "//pw_rpc",
        "//pw_rpc:pw_rpc_test_raw_rpc",
        "//pw_rpc:synchronous_client_api",
        "//pw_status",
        "//pw_thread:thread",
        "//pw_work_queue",
        "//pw_work_queue:stl_test_thread",
        "//pw_work_queue:test_thread_header",
    ],
)
