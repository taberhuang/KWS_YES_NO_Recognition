# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_build:pw_facade.bzl", "pw_facade")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

pw_facade(
    name = "pw_tls_client",
    hdrs = [
        "public/pw_tls_client/options.h",
        "public/pw_tls_client/session.h",
        "public/pw_tls_client/status.h",
    ],
    backend = ":pw_tls_client_backend",
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    deps = [
        "//pw_assert:assert",
        "//pw_assert:check",
        "//pw_bytes",
        "//pw_result",
        "//pw_status",
        "//pw_stream",
        "//pw_string",
    ],
)

label_flag(
    name = "pw_tls_client_backend",
    # TODO(zyecheng): Add a "backend_multiplexer" target once BoringSSL/MbedTLS
    # is ready.
    build_setting_default = "//pw_build:empty_cc_library",
)

pw_facade(
    name = "entropy",
    hdrs = [
        "public/pw_tls_client/entropy.h",
    ],
    backend = ":entropy_backend",
    strip_include_prefix = "public",
    deps = [
        "//pw_bytes",
        "//pw_status",
    ],
)

label_flag(
    name = "entropy_backend",
    # TODO(zyecheng): Add a "backend_multiplexer" target once BoringSSL/MbedTLS
    # is ready.
    build_setting_default = "//pw_build:empty_cc_library",
)

cc_library(
    name = "fake_entropy",
    srcs = ["fake_entropy.cc"],
    hdrs = [
        "public/pw_tls_client/entropy.h",
    ],
    strip_include_prefix = "public",
    deps = [
        "//pw_bytes",
        "//pw_log",
        "//pw_status",
    ],
)

cc_library(
    name = "crlset",
    hdrs = ["public/pw_tls_client/crlset.h"],
    strip_include_prefix = "public",
    deps = [
        "//pw_bytes",
    ],
)

cc_library(
    name = "test_server",
    srcs = ["test_server.cc"],
    hdrs = ["public/pw_tls_client/test/test_server.h"],
    strip_include_prefix = "public",
    # TODO: b/257527057 - Get this to build.
    tags = ["manual"],
    deps = [
        "//pw_bytes",
        "//pw_log",
        "//pw_preprocessor",
        "//pw_result",
        "//pw_stream",
    ],
)

pw_cc_test(
    name = "test_server_test",
    srcs = ["test_server_test.cc"],
    # TODO: b/257527057 - Get this to build.
    tags = ["manual"],
    deps = [":test_server"],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "backends.rst",
        "docs.rst",
    ],
    prefix = "pw_tls_client/",
    target_compatible_with = incompatible_with_mcu(),
)
