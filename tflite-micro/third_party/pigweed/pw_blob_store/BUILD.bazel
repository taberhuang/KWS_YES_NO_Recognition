# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_bloat:pw_size_diff.bzl", "pw_size_diff")
load("//pw_bloat:pw_size_table.bzl", "pw_size_table")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

cc_library(
    name = "pw_blob_store",
    srcs = ["blob_store.cc"],
    hdrs = [
        "public/pw_blob_store/blob_store.h",
        "public/pw_blob_store/internal/metadata_format.h",
    ],
    features = ["-conversion_warnings"],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_checksum",
        "//pw_kvs",
        "//pw_log",
        "//pw_preprocessor",
        "//pw_span",
        "//pw_status",
        "//pw_stream",
        "//pw_sync:borrow",
    ],
)

cc_library(
    name = "flat_file_system_entry",
    srcs = ["flat_file_system_entry.cc"],
    hdrs = ["public/pw_blob_store/flat_file_system_entry.h"],
    features = [
        "-conversion_warnings",
        "-ctad_warnings",
    ],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":pw_blob_store",
        "//pw_bytes",
        "//pw_file:flat_file_system",
        "//pw_status",
        "//pw_sync:mutex",
    ],
)

pw_cc_test(
    name = "blob_store_test",
    srcs = [
        "blob_store_test.cc",
    ],
    features = [
        "-conversion_warnings",
        "-ctad_warnings",
    ],
    # TODO: b/385375184 - Fix this test!
    tags = ["noubsan"],
    deps = [
        ":pw_blob_store",
        "//pw_kvs:crc16",
        "//pw_kvs:fake_flash",
        "//pw_kvs:fake_flash_test_key_value_store",
        "//pw_log",
        "//pw_random",
        "//pw_sync:borrow",
    ],
)

pw_cc_test(
    name = "blob_store_chunk_write_test",
    srcs = [
        "blob_store_chunk_write_test.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        ":pw_blob_store",
        "//pw_kvs:crc16",
        "//pw_kvs:fake_flash",
        "//pw_kvs:fake_flash_test_key_value_store",
        "//pw_log",
        "//pw_random",
    ],
)

pw_cc_test(
    name = "blob_store_deferred_write_test",
    srcs = [
        "blob_store_deferred_write_test.cc",
    ],
    features = [
        "-conversion_warnings",
        "-ctad_warnings",
    ],
    deps = [
        ":pw_blob_store",
        "//pw_kvs:crc16",
        "//pw_kvs:fake_flash",
        "//pw_kvs:fake_flash_test_key_value_store",
        "//pw_log",
        "//pw_random",
    ],
)

pw_cc_test(
    name = "flat_file_system_entry_test",
    srcs = ["flat_file_system_entry_test.cc"],
    features = [
        "-conversion_warnings",
        "-ctad_warnings",
    ],
    deps = [
        ":flat_file_system_entry",
        ":pw_blob_store",
        "//pw_kvs:crc16",
        "//pw_kvs:fake_flash",
        "//pw_kvs:fake_flash_test_key_value_store",
        "//pw_random",
        "//pw_sync:mutex",
    ],
)

pw_size_diff(
    name = "basic_blob_size_diff",
    base = "//pw_blob_store/size_report:base",
    label = "BlobStore",
    target = "//pw_blob_store/size_report:basic_blob",
)

pw_size_diff(
    name = "deferred_write_blob_size_diff",
    base = "//pw_blob_store/size_report:base",
    label = "BlobStore with deferred write",
    target = "//pw_blob_store/size_report:deferred_write_blob",
)

pw_size_table(
    name = "blob_size",
    reports = [
        ":basic_blob_size_diff",
        ":deferred_write_blob_size_diff",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "docs.rst",
        ":blob_size",
        "//pw_blob_store/size_report:docs",
    ],
    prefix = "pw_blob_store/",
    target_compatible_with = incompatible_with_mcu(),
)
