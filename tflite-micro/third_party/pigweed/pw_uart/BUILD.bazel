# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
)

licenses(["notice"])

cc_library(
    name = "uart_base",
    hdrs = [
        "public/pw_uart/uart_base.h",
    ],
    strip_include_prefix = "public",
    deps = [
        "//pw_status",
    ],
)

cc_library(
    name = "uart",
    hdrs = [
        "public/pw_uart/uart.h",
    ],
    strip_include_prefix = "public",
    deps = [
        ":uart_base",
        "//pw_assert:assert",
        "//pw_bytes",
        "//pw_chrono:system_clock",
        "//pw_span",
        "//pw_status",
    ],
)

cc_library(
    name = "uart_non_blocking",
    hdrs = [
        "public/pw_uart/uart_non_blocking.h",
    ],
    strip_include_prefix = "public",
    deps = [
        ":uart_base",
        "//pw_bytes",
        "//pw_function",
        "//pw_span",
        "//pw_status",
    ],
)

cc_library(
    name = "blocking_adapter",
    srcs = [
        "blocking_adapter.cc",
    ],
    hdrs = [
        "public/pw_uart/blocking_adapter.h",
    ],
    implementation_deps = ["//pw_assert:check"],
    strip_include_prefix = "public",
    deps = [
        ":uart",
        ":uart_non_blocking",
        "//pw_log",
        "//pw_status",
        "//pw_sync:timed_thread_notification",
    ],
)

cc_library(
    name = "stream",
    hdrs = [
        "public/pw_uart/stream.h",
    ],
    strip_include_prefix = "public",
    deps = [
        ":uart",
        "//pw_stream",
    ],
)

pw_cc_test(
    name = "uart_test",
    srcs = [
        "uart_test.cc",
    ],
    deps = [
        ":uart",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "uart_non_blocking_test",
    srcs = [
        "uart_non_blocking_test.cc",
    ],
    deps = [
        ":uart_non_blocking",
        "//pw_bytes",
        "//pw_function",
        "//pw_status",
    ],
)

pw_cc_test(
    name = "blocking_adapter_test",
    srcs = [
        "blocking_adapter_test.cc",
    ],
    deps = [
        ":blocking_adapter",
        "//pw_assert:check",
        "//pw_bytes",
        "//pw_log",
        "//pw_sync:lock_annotations",
        "//pw_sync:mutex",
        "//pw_sync:timed_thread_notification",
        "//pw_thread:test_thread_context",
        "//pw_thread:thread",
        "//pw_work_queue",
    ],
)

pw_cc_test(
    name = "stream_test",
    srcs = [
        "stream_test.cc",
    ],
    deps = [
        ":stream",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "backends.rst",
        "docs.rst",
    ],
    prefix = "pw_uart/",
    target_compatible_with = incompatible_with_mcu(),
)

filegroup(
    name = "doxygen",
    srcs = [
        "public/pw_uart/blocking_adapter.h",
        "public/pw_uart/stream.h",
        "public/pw_uart/uart.h",
        "public/pw_uart/uart_base.h",
        "public/pw_uart/uart_non_blocking.h",
    ],
)
