# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_bloat:pw_size_diff.bzl", "pw_size_diff")
load("//pw_bloat:pw_size_table.bzl", "pw_size_table")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_perf_test:pw_cc_perf_test.bzl", "pw_cc_perf_test")
load("//pw_unit_test:pw_cc_test.bzl", "pw_cc_test")

package(
    default_visibility = ["//visibility:public"],
)

licenses(["notice"])

cc_library(
    name = "pw_checksum",
    srcs = [
        "crc16_ccitt.cc",
        "crc32.cc",
    ],
    hdrs = [
        "public/pw_checksum/crc16_ccitt.h",
        "public/pw_checksum/crc32.h",
        "public/pw_checksum/internal/config.h",
    ],
    strip_include_prefix = "public",
    tags = ["noclangtidy"],
    deps = [
        ":config_override",
        "//pw_bytes",
        "//pw_span",
    ],
)

label_flag(
    name = "config_override",
    build_setting_default = "//pw_build:default_module_config",
)

pw_cc_test(
    name = "crc16_ccitt_test",
    srcs = [
        "crc16_ccitt_test.cc",
        "crc16_ccitt_test_c.c",
    ],
    deps = [
        ":pw_checksum",
        "//pw_bytes",
    ],
)

pw_cc_test(
    name = "crc32_test",
    srcs = [
        "crc32_test.cc",
        "crc32_test_c.c",
    ],
    deps = [
        ":pw_checksum",
        "//pw_bytes",
        "//pw_span",
    ],
)

pw_cc_perf_test(
    name = "crc32_perf_test",
    srcs = ["crc32_perf_test.cc"],
    deps = [
        ":pw_checksum",
        "//pw_bytes",
        "//pw_perf_test",
        "//pw_span",
    ],
)

pw_cc_perf_test(
    name = "crc16_perf_test",
    srcs = ["crc16_ccitt_perf_test.cc"],
    deps = [
        ":pw_checksum",
        "//pw_bytes",
        "//pw_perf_test",
        "//pw_span",
    ],
)

pw_size_diff(
    name = "crc16_checksum_size_diff",
    base = "//pw_checksum/size_report:noop_checksum",
    label = "CRC16 with 256-entry table",
    target = "//pw_checksum/size_report:crc16_checksum",
)

pw_size_diff(
    name = "crc32_8bit_checksum_size_diff",
    base = "//pw_checksum/size_report:noop_checksum",
    label = "CRC32: 8 bits per iteration, 256-entry table",
    target = "//pw_checksum/size_report:crc32_8bit_checksum",
)

pw_size_diff(
    name = "crc32_4bit_checksum_size_diff",
    base = "//pw_checksum/size_report:noop_checksum",
    label = "CRC32: 4 bit pers iteration, 16-entry table",
    target = "//pw_checksum/size_report:crc32_4bit_checksum",
)

pw_size_diff(
    name = "crc32_1bit_checksum_size_diff",
    base = "//pw_checksum/size_report:noop_checksum",
    label = "CRC32: 1 bit per iteration, no table",
    target = "//pw_checksum/size_report:crc32_1bit_checksum",
)

pw_size_diff(
    name = "fletcher16_checksum_size_diff",
    base = "//pw_checksum/size_report:noop_checksum",
    label = "Fletcher16 (illustrative only)",
    target = "//pw_checksum/size_report:fletcher16_checksum",
)

pw_size_table(
    name = "pw_checksum_size_report",
    reports = [
        ":crc16_checksum_size_diff",
        ":crc32_8bit_checksum_size_diff",
        ":crc32_4bit_checksum_size_diff",
        ":crc32_1bit_checksum_size_diff",
        ":fletcher16_checksum_size_diff",
    ],
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "Kconfig",
        "docs.rst",
        ":pw_checksum_size_report",
    ],
    prefix = "pw_checksum/",
    target_compatible_with = incompatible_with_mcu(),
)
