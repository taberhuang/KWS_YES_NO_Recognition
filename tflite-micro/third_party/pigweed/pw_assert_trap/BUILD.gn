# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")
import("$dir_pw_unit_test/test.gni")
config("disable_warnings") {
  cflags = [ "-Wno-thread-safety-analysis" ]
  visibility = [ ":*" ]
}

declare_args() {
  pw_assert_trap_HANDLER_BACKEND = "$dir_pw_assert_trap:trap_handler"
}

config("public_include_path") {
  include_dirs = [ "public" ]
  visibility = [ ":*" ]
}

config("assert_backend_config") {
  include_dirs = [ "assert_public_overrides" ]
  visibility = [ ":*" ]
}

config("check_backend_config") {
  include_dirs = [ "check_public_overrides" ]
  visibility = [ ":*" ]
}

pw_source_set("config") {
  public = [ "public/pw_assert_trap/config.h" ]
}

pw_source_set("handler") {
  public_configs = [ ":public_include_path" ]
  public_deps = [ "$dir_pw_preprocessor" ]
  public = [ "public/pw_assert_trap/handler.h" ]
}

pw_source_set("message") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_assert_trap/message.h" ]
  public_deps = [ "$dir_pw_string:string" ]
}

pw_source_set("assert_backend") {
  public_configs = [
    ":public_include_path",
    ":assert_backend_config",
  ]
  public_deps = [ ":handler" ]
  public = [
    "assert_public_overrides/pw_assert_backend/assert_backend.h",
    "public/pw_assert_trap/assert_trap.h",
  ]
}

pw_source_set("assert_backend.impl") {
  public_deps = [ pw_assert_trap_HANDLER_BACKEND ]
}

pw_source_set("check_backend") {
  public_configs = [
    ":public_include_path",
    ":check_backend_config",
  ]
  public_deps = [ ":handler" ]
  public = [
    "check_public_overrides/pw_assert_backend/check_backend.h",
    "public/pw_assert_trap/check_trap.h",
  ]
}

pw_source_set("check_backend.impl") {
  public_deps = [ pw_assert_trap_HANDLER_BACKEND ]
}

pw_source_set("pw_assert_trap") {
  public_deps = [
    ":assert_backend",
    ":check_backend",
  ]
}

pw_source_set("pw_assert_trap.impl") {
  deps = [
    ":assert_backend.impl",
    ":check_backend.impl",
  ]
}

pw_source_set("trap_handler") {
  public_deps = [
    ":config",
    ":handler",
    ":message",
    "$dir_pw_sync:interrupt_spin_lock",
  ]
  deps = [ "$dir_pw_string:builder" ]
  public_configs = [ ":disable_warnings" ]
  sources = [ "trap_handler.cc" ]
}

pw_test_group("tests") {
  # TODO: https://pwbug.dev/351889230 - this fails when trap is the used
  # as the system assert backend, so disable and only run manually.
  # tests = [ ":handler_test" ]
}

# provide a test implementation which is compiled with a different set of
# defines to allow unittesting.
config("test_config") {
  defines = [
    # Disable the trap to allow testing to continue
    "_PW_ASSERT_TRAP_DISABLE_TRAP_FOR_TESTING=1",

    # Disable the capture of location info to ensure tests are portable
    "PW_ASSERT_TRAP_DISABLE_LOCATION_CAPTURE=1",
  ]
  visibility = [ ":*" ]
}

pw_source_set("trap_handler_test") {
  public_deps = [
    ":config",
    ":handler",
    ":message",
    "$dir_pw_sync:interrupt_spin_lock",
  ]
  deps = [ "$dir_pw_string:builder" ]
  public_configs = [
    ":disable_warnings",
    ":test_config",
  ]
  sources = [ "trap_handler.cc" ]
  visibility = [ ":*" ]
}

pw_test("handler_test") {
  deps = [ ":trap_handler_test" ]
  sources = [ "trap_handler_test.cc" ]
}
