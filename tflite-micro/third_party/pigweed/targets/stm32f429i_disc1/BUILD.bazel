# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_build:merge_flags.bzl", "flags_from_dict")
load("//pw_build:pw_linker_script.bzl", "pw_linker_script")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

platform(
    name = "stm32f429i_baremetal",
    constraint_values = [
        "//pw_interrupt_cortex_m:backend",
        "//pw_malloc:bucket_block_allocator_backend",
        "//pw_sys_io_baremetal_stm32f429:compatible",
        "@platforms//cpu:armv7e-m",
        "@platforms//os:none",
        "//pw_build/constraints/arm:cortex-m4",
        "//pw_build/constraints/rust:no_std",
    ],
    flags = flags_from_dict({
        "@pigweed//pw_assert:check_backend": "//pw_assert_basic",
        "@pigweed//pw_assert:check_backend_impl": "//pw_assert_basic:impl",
        "@pigweed//pw_boot:backend": "//pw_boot_cortex_m",
        "@pigweed//pw_log:backend": "//pw_log_basic",
        "@pigweed//pw_log:backend_impl": "//pw_log_basic:impl",
        "@pigweed//pw_malloc:backend": "//pw_malloc:bucket_block_allocator",
        "@pigweed//pw_sys_io:backend": "//pw_sys_io_baremetal_stm32f429",
        "@pigweed//pw_system:extra_platform_libs": "//targets/stm32f429i_disc1:extra_platform_libs",
    }),
)

cc_library(
    name = "pre_init",
    srcs = [
        "boot.cc",
        "vector_table.c",
    ],
    defines = [
        "PW_MALLOC_ACTIVE=1",
    ],
    deps = [
        "//pw_boot",
        "//pw_malloc",
        "//pw_preprocessor",
        "//pw_sys_io_baremetal_stm32f429",
        "//pw_toolchain:infinite_loop",
    ],
    # TODO: b/251939135 - Remove the need for alwayslink by rethinking how
    # pw_boot_cortex_m is structured in the build system.
    alwayslink = 1,
)

cc_library(
    name = "extra_platform_libs",
    deps = [
        # The initialization code.
        ":pre_init",
        # Arm GCC support libraries.
        "//pw_toolchain/arm_gcc:arm_none_eabi_gcc_support",
    ],
)

pw_linker_script(
    name = "basic_linker_script",
    # These come from
    # https://cs.opensource.google/pigweed/pigweed/+/main:targets/stm32f429i_disc1/target_toolchains.gni
    # TODO(tpudlik): Figure out how to share them between bazel and GN.
    defines = [
        "PW_BOOT_FLASH_BEGIN=0x08000200",
        "PW_BOOT_FLASH_SIZE=1024K",
        "PW_BOOT_HEAP_SIZE=112K",
        "PW_BOOT_MIN_STACK_SIZE=1K",
        "PW_BOOT_RAM_BEGIN=0x20000000",
        "PW_BOOT_RAM_SIZE=192K",
        "PW_BOOT_VECTOR_TABLE_BEGIN=0x08000000",
        "PW_BOOT_VECTOR_TABLE_SIZE=512",
    ],
    linker_script = "//pw_boot_cortex_m:basic_cortex_m.ld",
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "target_docs.rst",
    ],
    target_compatible_with = incompatible_with_mcu(),
)
