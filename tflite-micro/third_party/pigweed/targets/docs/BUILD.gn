# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pigweed/targets/lm3s6965evb_qemu/target_toolchains.gni")
import("$dir_pw_boot_cortex_m/toolchain.gni")
import("$dir_pw_docgen/docs.gni")
import("$dir_pw_log_tokenized/backend.gni")
import("$dir_pw_protobuf_compiler/proto.gni")
import("$dir_pw_toolchain/arm_gcc/toolchains.gni")
import("$dir_pw_toolchain/generate_toolchain.gni")
import("$dir_pw_toolchain/traits.gni")
import("$pw_external_nanopb/nanopb.gni")

if (current_toolchain != default_toolchain) {
  pw_source_set("tokenized_log_handler") {
    deps = [
      "$dir_pw_bytes",
      "$dir_pw_log_tokenized:handler.facade",
      "$dir_pw_sys_io",
    ]
    sources = [ "tokenized_log_handler.cc" ]
  }
}

# Toolchain for generating upstream Pigweed documentation.
generate_toolchain("docs") {
  # Use the lm3s6965evb_qemu toolchain for pw_size_diff targets.
  _base_toolchain = pw_target_toolchain_lm3s6965evb_qemu.size_optimized_clang
  forward_variables_from(_base_toolchain,
                         "*",
                         [
                           "defaults",
                           "name",
                         ])

  # Docs assume output binary location, and don't support extensions.
  final_binary_extension = ""

  defaults = {
    forward_variables_from(_base_toolchain.defaults, "*")

    # This is the docs target.
    pw_docgen_BUILD_DOCS = true

    # Disable NC tests in case the base toolchain has them enabled.
    pw_compilation_testing_NEGATIVE_COMPILATION_ENABLED = false

    pw_assert_BACKEND = dir_pw_assert_tokenized
    pw_log_BACKEND = dir_pw_log_tokenized
    pw_log_tokenized_HANDLER_BACKEND =
        get_path_info(":tokenized_log_handler", "abspath")

    pw_toolchain_CXX_STANDARD = pw_toolchain_STANDARD.CXX20

    pw_boot_cortex_m_LINK_CONFIG_DEFINES = []
    pw_boot_cortex_m_LINK_CONFIG_DEFINES = [
      "PW_BOOT_FLASH_BEGIN=0x00000200",
      "PW_BOOT_FLASH_SIZE=1000K",
      "PW_BOOT_HEAP_SIZE=0",
      "PW_BOOT_MIN_STACK_SIZE=1K",
      "PW_BOOT_RAM_BEGIN=0x20000000",
      "PW_BOOT_RAM_SIZE=1000K",
      "PW_BOOT_VECTOR_TABLE_BEGIN=0x00000000",
      "PW_BOOT_VECTOR_TABLE_SIZE=512",
    ]

    pw_async2_DISPATCHER_BACKEND = "$dir_pw_async2_basic:dispatcher_backend"
    pw_chrono_SYSTEM_CLOCK_BACKEND = "$dir_pw_chrono_stl:system_clock"
    pw_chrono_SYSTEM_TIMER_BACKEND = "$dir_pw_chrono_stl:system_timer"
    pw_async_TASK_BACKEND = "$dir_pw_async_basic:task"
    pw_async_FAKE_DISPATCHER_BACKEND = "$dir_pw_async_basic:fake_dispatcher"
  }
}
