# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_python//sphinxdocs:sphinx_docs_library.bzl", "sphinx_docs_library")
load("//pw_build:compatibility.bzl", "incompatible_with_mcu")
load("//pw_build:merge_flags.bzl", "flags_from_dict")
load("//pw_build:pw_linker_script.bzl", "pw_linker_script")
load("//third_party/freertos:flags.bzl", "FREERTOS_FLAGS")

package(
    default_visibility = ["//visibility:public"],
    features = ["-layering_check"],
)

licenses(["notice"])

cc_library(
    name = "freertos_config",
    hdrs = [
        "config/FreeRTOSConfig.h",
    ],
    strip_include_prefix = "config",
    target_compatible_with = [":freertos_config_cv"],
    deps = ["//third_party/freertos:config_assert"],
)

# Constraint value corresponding to :freertos_config.
#
# If you include this in your platform definition, you will tell Bazel to use
# the :freertos_config defined above when compiling FreeRTOS.  (See
# //third_party/freertos/BUILD.bazel.) If you include it in a target's
# `target_compatible_with`, you will tell Bazel the target can only be built
# for platforms that specify this FreeRTOS config.
constraint_value(
    name = "freertos_config_cv",
    constraint_setting = "@freertos//:freertos_config_setting",
)

platform(
    name = "stm32f429i_freertos",
    constraint_values = [
        ":freertos_config_cv",
        "//pw_build/constraints/rtos:freertos",
        "//pw_interrupt_cortex_m:backend",
        "//pw_malloc:bucket_block_allocator_backend",
        "@freertos//:port_ARM_CM4F",
        "@freertos//:disable_task_statics",
        "@platforms//cpu:armv7e-m",
        "@platforms//os:none",
        "//pw_build/constraints/arm:cortex-m4",
        "//pw_build/constraints/rust:no_std",
    ],
    flags = flags_from_dict(FREERTOS_FLAGS | {
        "@cmsis_core//:cc_defines": ":cc_defines",
        "@pigweed//pw_assert:check_backend": "//pw_assert_basic",
        "@pigweed//pw_assert:check_backend_impl": "//pw_assert_basic:impl",
        "@pigweed//pw_boot:backend": "//pw_boot_cortex_m",
        "@pigweed//pw_log:backend": "//pw_log_tokenized",
        "@pigweed//pw_log:backend_impl": "//pw_log_tokenized:impl",
        "@pigweed//pw_log_tokenized:handler_backend": "//pw_system:log_backend",
        "@pigweed//pw_malloc:backend": "//pw_malloc:bucket_block_allocator",
        "@pigweed//pw_sys_io:backend": "//pw_sys_io_stm32cube",
        "@pigweed//pw_system:extra_platform_libs": "//targets/stm32f429i_disc1_stm32cube:extra_platform_libs",
        "@pigweed//pw_unit_test:main": "//targets/stm32f429i_disc1_stm32cube:unit_test_app",
        "@stm32f4xx_hal_driver//:hal_config": "//targets/stm32f429i_disc1_stm32cube:hal_config",
    }),
)

cc_library(
    name = "cc_defines",
    defines = [
        "STM32CUBE_HEADER=\\\"stm32f4xx.h\\\"",
        "STM32F429xx",
    ],
)

cc_library(
    name = "hal_config",
    hdrs = [
        "config/stm32f4xx_hal_conf.h",
    ],
    strip_include_prefix = "config",
    tags = ["noclangtidy"],
)

cc_library(
    name = "unit_test_app",
    testonly = True,
    srcs = [
        "unit_test_app.cc",
    ],
    features = ["-conversion_warnings"],
    deps = [
        "//pw_status",
        "//pw_system",
        "//pw_thread:thread",
        "//pw_thread_freertos:thread",
        "//pw_unit_test:rpc_service",
    ],
    alwayslink = 1,
)

cc_library(
    name = "pre_init",
    srcs = [
        "boot.cc",
        "vector_table.c",
    ],
    copts = ["-Wno-return-type"],
    defines = ["PW_MALLOC_ACTIVE=1"],
    implementation_deps = ["//pw_assert:check"],
    target_compatible_with = [":freertos_config_cv"],
    deps = [
        ":freertos_config",
        "//pw_boot",
        "//pw_boot_cortex_m",
        "//pw_malloc",
        "//pw_preprocessor",
        "//pw_string",
        "//pw_sys_io_stm32cube",
        "//pw_system:init",
        "//pw_toolchain:infinite_loop",
        "//third_party/freertos:support",
        "//third_party/stm32cube",
        "@freertos",
    ],
    alwayslink = 1,
)

cc_library(
    name = "extra_platform_libs",
    deps = [
        # The linker script for pw_boot_cortex_m.
        ":linker_script",
        # The initialization code.
        ":pre_init",
        # The linker script for pw_tokenizer.
        "//pw_tokenizer:linker_script",
        # Arm GCC support libraries.
        "//pw_toolchain/arm_gcc:arm_none_eabi_gcc_support",
    ],
)

pw_linker_script(
    name = "linker_script",
    defines = [
        "PW_BOOT_FLASH_BEGIN=0x08000200",
        "PW_BOOT_FLASH_SIZE=2048K",

        # TODO(b/235348465): Currently "pw_tokenizer/detokenize_test" requires
        # at least 6K bytes in heap when using pw_malloc:bucket_block_allocator.
        # The heap size required for tests should be investigated.
        "PW_BOOT_HEAP_SIZE=7K",
        "PW_BOOT_MIN_STACK_SIZE=1K",
        "PW_BOOT_RAM_BEGIN=0x20000000",
        "PW_BOOT_RAM_SIZE=192K",
        "PW_BOOT_VECTOR_TABLE_BEGIN=0x08000000",
        "PW_BOOT_VECTOR_TABLE_SIZE=512",
    ],
    linker_script = "//pw_boot_cortex_m:basic_cortex_m.ld",
)

sphinx_docs_library(
    name = "docs",
    srcs = [
        "target_docs.rst",
    ],
    target_compatible_with = incompatible_with_mcu(),
)
